"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var breeze_client_1 = require('breeze-client');
var DataService = (function () {
    function DataService() {
        var _this = this;
        breeze_client_1.config.initializeAdapterInstance('dataService', 'webApiOData', true);
        this._em = new breeze_client_1.EntityManager('http://localhost:60062/odata');
        this._em.fetchMetadata(function (schema) {
            console.log('schema', schema);
            var collectionPointType = _this._em.metadataStore.getEntityType("CollectionPoint");
            collectionPointType.setProperties({ autoGeneratedKeyType: breeze_client_1.AutoGeneratedKeyType.Identity });
        });
    }
    DataService.prototype.getAllCollectionPoints = function () {
        var query = breeze_client_1.EntityQuery.from('CollectionPoints').expand('ParcelGroups').orderBy('Name');
        return this._em.executeQuery(query)
            .then(function (res) { return res.results; })
            .catch(function (error) {
            console.log(error);
            return Promise.reject(error);
        });
    };
    DataService.prototype.getPagedCollectionPoints = function (skip, take, filters) {
        var q = breeze_client_1.EntityQuery.from('CollectionPoints');
        q = this.addFiltersToQuery(filters, q);
        q = q.orderBy('Name')
            .expand('ParcelGroups')
            .skip(skip)
            .take(take)
            .inlineCount()
            .using(breeze_client_1.FetchStrategy.FromServer);
        return this._em.executeQuery(q)
            .then(function (data) {
            console.log(data.query);
            // // get the MetadataStore from the query's manager
            // var store = data.query.entityManager.metadataStore;
            // // get the types of interest
            // var collectionPointType = (<any>store).getType('CollectionPoint');
            // var parcelGroupType = (<any>store).getType('ParcelGroup');
            console.log('getPagedCollectionPoints result', data);
            var pagedResult = {
                inlineCount: data.inlineCount,
                results: data.results
            };
            return pagedResult;
        });
    };
    DataService.prototype.newCollectionPoint = function () {
        return this._em.createEntity('CollectionPoint', {
            Address: '<address>',
            Latitiude: 0,
            Longitude: 0,
            Name: '<name>',
            Status: '<status>'
        });
    };
    DataService.prototype.getChangesCount = function () {
        return this._em.getChanges().length;
    };
    DataService.prototype.hasChanges = function () {
        return this._em.hasChanges();
    };
    DataService.prototype.saveAllChanges = function () {
        return this._em.saveChanges();
    };
    DataService.prototype.addFiltersToQuery = function (filters, query) {
        if (filters == undefined)
            return query;
        for (var propt in filters) {
            var matchMode = filters[propt].matchMode;
            var value = filters[propt].value;
            query = query.where(propt, matchMode, value);
        }
        return query;
    };
    DataService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DataService);
    return DataService;
}());
exports.DataService = DataService;
//# sourceMappingURL=data-service.js.map
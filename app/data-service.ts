import { Injectable } from '@angular/core';
import { EntityManager, EntityQuery, config, SaveOptions, SaveResult, AutoGeneratedKeyType, IStructuralType, FetchStrategy } from 'breeze-client';
import { CollectionPoint } from './models/breeze-models';
import { PagedResult, Filter } from './models/paging-model';


@Injectable()
export class DataService {

  private _em: EntityManager;

  constructor() {
    config.initializeAdapterInstance('dataService', 'webApiOData', true);
    this._em = new EntityManager('http://localhost:60062/odata');
    this._em.fetchMetadata((schema) => {
      console.log('schema', schema);
      var collectionPointType = this._em.metadataStore.getEntityType("CollectionPoint");
      (<any>collectionPointType).setProperties({ autoGeneratedKeyType: AutoGeneratedKeyType.Identity });
    });
  }

  getAllCollectionPoints(): Promise<CollectionPoint[]> {
    let query = EntityQuery.from('CollectionPoints').expand('ParcelGroups').orderBy('Name');

    return <Promise<CollectionPoint[]>><any>this._em.executeQuery(query)
      .then(res => res.results)
      .catch((error) => {
        console.log(error);
        return Promise.reject(error);
      });
  }

  getPagedCollectionPoints(skip: number, take: number, filters: any): Promise<PagedResult<CollectionPoint>> {

    let q = EntityQuery.from('CollectionPoints');

    q = this.addFiltersToQuery(filters, q);

    q = q.orderBy('Name')
      .expand('ParcelGroups')
      .skip(skip)
      .take(take)
      .inlineCount()
      .using(FetchStrategy.FromServer);

    return this._em.executeQuery(q)
      .then((data) => {

        console.log(data.query);

        // // get the MetadataStore from the query's manager
        // var store = data.query.entityManager.metadataStore;

        // // get the types of interest
        // var collectionPointType = (<any>store).getType('CollectionPoint');
        // var parcelGroupType = (<any>store).getType('ParcelGroup');
        


        console.log('getPagedCollectionPoints result', data);
        var pagedResult: PagedResult<CollectionPoint> = {
          inlineCount: data.inlineCount,
          results: <Array<CollectionPoint>>data.results
        };
        return pagedResult;
      });
  }


  newCollectionPoint(): CollectionPoint {
    return <CollectionPoint>this._em.createEntity('CollectionPoint', {
      Address: '<address>',
      Latitiude: 0,
      Longitude: 0,
      Name: '<name>',
      Status: '<status>'
    });
  }

  getChangesCount(): number {
    return this._em.getChanges().length;
  }

  hasChanges(): boolean {
    return this._em.hasChanges();
  }

  saveAllChanges(): Promise<SaveResult> {
    return this._em.saveChanges();
  }

  private addFiltersToQuery(filters: any, query: EntityQuery): EntityQuery {
    if (filters == undefined)
      return query;

    for (var propt in filters) {
      let matchMode: string = (<Filter>filters[propt]).matchMode;
      let value: string = (<Filter>filters[propt]).value;
      query = query.where(propt, matchMode, value);
    }

    return query;
  }


}